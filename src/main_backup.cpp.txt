#include <Arduino.h>
#include <BLEGamepadClient.h>
#include "mecanum_drive_controller.h"

// ================= CONTROL VARIABLES =================
// change this to switch between calculation methods:
// SIMPLE = fast, easy to understand
// COMPLEX = mathematically precise with trigonometry
KinematicsMethod KINEMATICS_METHOD = SIMPLE;  // <-- CHANGE THIS TO SWITCH METHODS

// global objects
MecanumBase robot(BTS7960, KINEMATICS_METHOD);  // using bts7960 drivers with chosen method
BLEController controller;

// control parameters
const float SPEED_MULTIPLIER = 0.8f;  // max speed scaling
const unsigned long CONTROL_INTERVAL = 50;  // control loop interval in ms
unsigned long last_control_time = 0;

void setup() {
    Serial.begin(115200);
    Serial.println("starting mecanum robot...");
    
    // display which kinematics method is being used
    Serial.print("using kinematics method: ");
    if (KINEMATICS_METHOD == SIMPLE) {
        Serial.println("simple");
    } else {
        Serial.println("complex (theta/power)");
    }
    
    // initialize robot base
    robot.init();
    
    // initialize xbox controller
    controller.begin();
    
    Serial.println("robot ready!");
}

void loop() {
    unsigned long current_time = millis();
    
    // run control loop at fixed interval
    if (current_time - last_control_time >= CONTROL_INTERVAL) {
        last_control_time = current_time;
        
        if (controller.isConnected()) {
            BLEControlsEvent e;
            controller.readControls(e);
            
            // get controller inputs and apply speed scaling
            float strafe = e.leftStickX * SPEED_MULTIPLIER;    // left stick x = strafe
            float forward = e.leftStickY * SPEED_MULTIPLIER;   // left stick y = forward/back
            float rotation = e.rightStickX * SPEED_MULTIPLIER; // right stick x = rotation
            
            // move robot
            robot.move(strafe, forward, rotation);
            
            // debug output (comment out if not needed)
            if (abs(strafe) > 0.1 || abs(forward) > 0.1 || abs(rotation) > 0.1) {
                Serial.printf("move: x=%.2f, y=%.2f, rot=%.2f\n", strafe, forward, rotation);
            }
        } else {
            // stop robot if controller not connected
            robot.stop();
            Serial.println("controller not connected");
        }
    }
    
    // small delay to prevent watchdog issues
    delay(100);
}